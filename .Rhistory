summarise(total = n()))))
facilities_by_county2 <- facilities_by_county %>%
pivot_longer(cols=2:3,
names_to = "names",
values_to = "count")
ggplot(facilities_by_county2, aes(x = factor(county),
y = count,
fill = names,
colour = names)) +
geom_bar(stat = "identity") +
labs(title = "Total number of facilities by county & pollutant facilities",
y = "County",
x = "Total") +
theme_bw()
View(facilities_by_county)
View(facilities_by_county2)
View(facilities_by_county)
ascension_facilities <- ascension %>%
filter(REPORTING_YEAR >= 2000 & REPORTING_YEAR <= 2018)
View(ascension_facilities)
ascension_facilities <- ascension %>%
filter(REPORTING_YEAR >= 2000 & REPORTING_YEAR <= 2018) %>%
group_by(REPORTING_YEAR, AI_NAME) %>%
summarise(TOTAL_FACILITIES)
ascension_facilities <- ascension %>%
filter(REPORTING_YEAR >= 2000 & REPORTING_YEAR <= 2018) %>%
group_by(REPORTING_YEAR) %>%
summarise(TOTAL_FACILITIES = n())
View(ascension)
View(ascension2)
ascension_facilities <- ascension %>%
filter(REPORTING_YEAR >= 2000 & REPORTING_YEAR <= 2018) %>%
group_by(REPORTING_YEAR) %>%
summarise(TOTAL_FACILITIES = n() - c(nrow(ascension2 %>%
group_by(AI_NAME,
REPORTING_YEAR) %>%
summarise(total = n())),
nrow(calcasieu2 %>%
group_by(AI_NAME,
REPORTING_YEAR) %>%
summarise(total = n())))) %>%
mutate(POLLUTANT_FACILITIES = c(nrow(ascension2 %>%
group_by(AI_NAME,
REPORTING_YEAR) %>%
summarise(total = n())),
nrow(calcasieu2 %>%
group_by(AI_NAME,
REPORTING_YEAR) %>%
summarise(total = n()))))
View(ascension_facilities)
ascension_facilities <- ascension %>%
filter(REPORTING_YEAR >= 2000 & REPORTING_YEAR <= 2018) %>%
group_by(REPORTING_YEAR) %>%
summarise(TOTAL_FACILITIES = n() - c(nrow(ascension2 %>%
group_by(AI_NAME,
REPORTING_YEAR) %>%
summarise(total = n())),
nrow(calcasieu2 %>%
group_by(AI_NAME,
REPORTING_YEAR) %>%
summarise(total = n())))) %>%
mutate(POLLUTANT_FACILITIES = c(nrow(ascension2 %>%
group_by(AI_NAME,
REPORTING_YEAR) %>%
summarise(total = n())),
nrow(calcasieu2 %>%
group_by(AI_NAME,
REPORTING_YEAR) %>%
summarise(total = n()))))
ascension_facilities <- ascension %>%
filter(REPORTING_YEAR >= 2000 & REPORTING_YEAR <= 2018) %>%
group_by(REPORTING_YEAR) %>%
summarise(TOTAL_FACILITIES = n() - c(nrow(ascension2 %>%
group_by(AI_NAME,
REPORTING_YEAR) %>%
summarise(total = n())),
nrow(calcasieu2 %>%
group_by(AI_NAME,
REPORTING_YEAR) %>%
summarise(total = n()))))
ascension_facilities <- ascension %>%
filter(REPORTING_YEAR >= 2000 & REPORTING_YEAR <= 2018) %>%
group_by(REPORTING_YEAR) %>%
summarise(TOTAL_FACILITIES = n())
ascension_facilities <- ascension %>%
filter(REPORTING_YEAR >= 2000 & REPORTING_YEAR <= 2018) %>%
group_by(REPORTING_YEAR) %>%
summarise(TOTAL_FACILITIES = n())
ascension_facilities <- mutate(POLLUTANT_FACILITIES = c(nrow(ascension2 %>%
group_by(AI_NAME,
REPORTING_YEAR) %>%
summarise(total = n())),
nrow(calcasieu2 %>%
group_by(AI_NAME,
REPORTING_YEAR) %>%
summarise(total = n()))))
ascension_facilities <- ascension %>%
filter(REPORTING_YEAR >= 2000 & REPORTING_YEAR <= 2018) %>%
group_by(REPORTING_YEAR) %>%
summarise(TOTAL_FACILITIES = n())
ascension_facilities <- ascension_facilities mutate(POLLUTANT_FACILITIES = c(nrow(ascension2 %>%
ascension_facilities <- ascension %>%
filter(REPORTING_YEAR >= 2000 & REPORTING_YEAR <= 2018) %>%
group_by(REPORTING_YEAR) %>%
summarise(TOTAL_FACILITIES = n())
ascension_facilities <- ascension_facilities %>% mutate(POLLUTANT_FACILITIES = c(nrow(ascension2 %>%
group_by(AI_NAME,
REPORTING_YEAR) %>%
summarise(total = n())),
nrow(calcasieu2 %>%
group_by(AI_NAME,
REPORTING_YEAR) %>%
summarise(total = n()))))
ascension_facilities <- ascension %>%
filter(REPORTING_YEAR >= 2000 & REPORTING_YEAR <= 2018) %>%
group_by(REPORTING_YEAR) %>%
summarise(TOTAL_FACILITIES = n())
ascension_facilities <- ascension_facilities %>%
mutate(POLLUTANT_FACILITIES = nrow(ascension2 %>%
group_by(AI_NAME,
REPORTING_YEAR) %>%
summarise(total = n())),
nrow(calcasieu2 %>%
group_by(AI_NAME,
REPORTING_YEAR) %>%
summarise(total = n())))
ascension_facilities <- ascension %>%
filter(REPORTING_YEAR >= 2000 & REPORTING_YEAR <= 2018) %>%
group_by(REPORTING_YEAR) %>%
summarise(TOTAL_FACILITIES = n())
ascension_facilities <- ascension_facilities %>%
mutate(POLLUTANT_FACILITIES = nrow(ascension2 %>%
group_by(AI_NAME,
REPORTING_YEAR) %>%
summarise(total = n())))
knitr::opts_chunk$set(echo = TRUE)
library(readxl)
library(purrr)
library(rvest)
library(lubridate)
library(tidyverse)
library(ggplot2)
library(dplyr)
# Get data from local cvs file (data was downloaded from https://www.deq.louisiana.gov/page/eric-public-reports)
data_set_before_2015 <- read_excel("Annual_Certified_Emissions_before_2015.xlsx")
data_set_after_2015 <- read_excel("Annual_Certified_Emissions_after_2015.xlsx")
#View(dataset)
# Reusable Variables
graph_colors <- c("#999999",
"#E69F00",
"#56B4E9",
"#009E73",
"#F0E442",
"#0072B2")
legend_variables_labels <- c("Others",
"Benzene",
"Butadiene",
"Ethylene",
"Formaldehyde",
"Vinyl")
# Select pollutants/variables that contribute the most to cancer
data_set_before_2015 <- data_set_before_2015 %>%
select(REPORTING_YEAR,
AI_NAME,
PARISH_OR_COUNTY_DESC,
`1,3-Butadiene`,
`Arsenic (and compounds)`,
`Asbestos`,
`Benzene`,
`Benzidine`,
`Beryllium (Table 51.1)`,
`Cadmium (and compounds)`,
`Chromium VI (and compounds)`,
`Ethylene oxide`,
`Formaldehyde`,
`Nickel (and compounds)`,
`Nickel (refinery dust)`,
`Sulfuric acid`,
`Trichloroethylene`,
`Vinyl chloride`
)
# Select pollutants/variables that contribute the most to cancer
data_set_after_2015 <- data_set_after_2015 %>%
select(REPORTING_YEAR,
AI_NAME,
PARISH_OR_COUNTY_DESC,
`1,3-Butadiene`,
`Arsenic (and compounds)`,
`Asbestos`,
`Benzene`,
`Benzidine`,
`Beryllium (Table 51.1)`,
`Cadmium (and compounds)`,
`Chromium VI (and compounds)`,
`Ethylene oxide`,
`Formaldehyde`,
`Nickel (and compounds)`,
`Nickel (refinery dust)`,
`Sulfuric acid`,
`Trichloroethylene`,
`Vinyl chloride`
)
# Join both tables to have a single data set
data_set <- data_set_before_2015 %>%
full_join(data_set_after_2015,
by = join_by(REPORTING_YEAR,
AI_NAME,
PARISH_OR_COUNTY_DESC,
`1,3-Butadiene`,
`Arsenic (and compounds)`,
`Asbestos`,
`Benzene`,
`Benzidine`,
`Beryllium (Table 51.1)`,
`Cadmium (and compounds)`,
`Chromium VI (and compounds)`,
`Ethylene oxide`,
`Formaldehyde`,
`Nickel (and compounds)`,
`Nickel (refinery dust)`,
`Sulfuric acid`,
`Trichloroethylene`,
`Vinyl chloride`)) %>%
arrange(AI_NAME)
# Creating `ascension` table and filter data based on `Ascension` county
ascension <- data_set %>%
filter(PARISH_OR_COUNTY_DESC == "Ascension") %>%
arrange(AI_NAME)
# Creating `calcasieu` table and filter data based on `Calcasieu` county
calcasieu <- data_set %>%
filter(PARISH_OR_COUNTY_DESC == "Calcasieu") %>%
arrange(AI_NAME)
# Selecting facilities that contributed to the production of at least one pollutant
ascension2 <- ascension %>% filter(rowSums(is.na(ascension)) != ncol(ascension) - 3)
# Remove Columns by Index
ascension2 <- ascension2[-c(2:3)]
calcasieu2 <- calcasieu %>% filter(rowSums(is.na(calcasieu)) != ncol(calcasieu) - 3)
calcasieu2 <- calcasieu2[-c(2:3)]
# Replace NA values with 0
ascension2[is.na(ascension2)] <- 0
calcasieu2[is.na(calcasieu2)] <- 0
# Table that holds the Ascension total number of facilities by year
ascension_total_facilities <- ascension %>%
filter(REPORTING_YEAR >= 2000 & REPORTING_YEAR <= 2018) %>%
group_by(REPORTING_YEAR) %>%
summarise(TOTAL_FACILITIES = n() )
# Table that holds the Ascension total number of facilities that contributes to at least one cancer pollutant by year
ascension_pollutant_facilities <- ascension2 %>%
filter(REPORTING_YEAR >= 2000 & REPORTING_YEAR <= 2018) %>%
group_by(REPORTING_YEAR) %>%
summarise(POLLUTANTL_FACILITIES = n() )
# Table that holds Ascension pollutant and non-pollutant facilities
ascension_facilities <- ascension_total_facilities %>%
left_join(ascension_pollutant_facilities,
join_by(REPORTING_YEAR))
# Plotting Ascension findings
ascension_facilities %>% mutate(NON_POLLUTANT_FACILITIES = TOTAL_FACILITIES - POLLUTANTL_FACILITIES) %>%
select(REPORTING_YEAR,
NON_POLLUTANT_FACILITIES,
POLLUTANTL_FACILITIES) %>%
pivot_longer(cols = 2:3,
names_to = "type",
values_to = "total") %>%
ggplot(aes(x = factor(REPORTING_YEAR), y = total, fill = type)) +
geom_bar(stat = "identity") +
labs(title = "Total Number of Facilities in Ascension (2000-2018)",
x = "Year",
y = "Total Facilities") +
theme(axis.text.x = element_text(angle = 90,
vjust = 0.5,
hjust = 1)) +
scale_fill_manual(name="",
values=c("#999999",
"#E69F00"),
labels = c("Non-pollutant facilities",
"Pollutant Facilities"))
# Table that holds the Calcasieu total number of facilities by year
calcasieu_total_facilities <- calcasieu %>%
filter(REPORTING_YEAR >= 2000 & REPORTING_YEAR <= 2018) %>%
group_by(REPORTING_YEAR) %>%
summarise(TOTAL_FACILITIES = n() )
# Table that holds the Calcasieu total number of facilities that contributes to at least one cancer pollutant by year
calcasieu_pollutant_facilities <- calcasieu2 %>%
filter(REPORTING_YEAR >= 2000 & REPORTING_YEAR <= 2018) %>%
group_by(REPORTING_YEAR) %>%
summarise(POLLUTANTL_FACILITIES = n() )
# Table that holds Calcasieu pollutant and non-pollutant facilities
calcasieu_facilities <- calcasieu_total_facilities %>%
left_join(ascension_pollutant_facilities,
join_by(REPORTING_YEAR))
# Plotting Calcasieu findings
calcasieu_facilities %>% mutate(NON_POLLUTANT_FACILITIES = TOTAL_FACILITIES - POLLUTANTL_FACILITIES) %>%
select(REPORTING_YEAR,
POLLUTANTL_FACILITIES,
NON_POLLUTANT_FACILITIES) %>%
pivot_longer(cols = 2:3,
names_to = "type",
values_to = "total") %>%
ggplot(aes(x = factor(REPORTING_YEAR), y = total, fill = type)) +
geom_bar(stat = "identity") +
labs(title = "Total Number of Facilities in Calcasieu (2000-2018)",
x = "Year",
y = "Total Facilities") +
theme(axis.text.x = element_text(angle = 90,
vjust = 0.5,
hjust = 1)) +
scale_fill_manual(name="",
values=c("#999999",
"#E69F00"),
labels = c("Non-pollutant facilities",
"Pollutant Facilities"))
#calculated the amount for each pollutant in ascension county from 2000 to 2018
total_ascension <- ascension2 %>%
# only show years from 2000 to 2018
filter(REPORTING_YEAR >= 2000 & REPORTING_YEAR <= 2018) %>%
group_by(REPORTING_YEAR) %>%
summarise( total_benzene = sum(Benzene),
total_butadiene = sum(`1,3-Butadiene`),
total_ethylene = sum(`Ethylene oxide`),
total_formaldehyde = sum(Formaldehyde),
total_vinyl_chloride = sum(`Vinyl chloride`),
others = sum(`Arsenic (and compounds)` +
Asbestos +
Benzidine +
`Beryllium (Table 51.1)` +
`Cadmium (and compounds)` +
`Chromium VI (and compounds)` +
`Ethylene oxide` +
Formaldehyde +
`Nickel (refinery dust)` +
`Nickel (and compounds)` +
Trichloroethylene))
total_ascension <- total_ascension %>%
pivot_longer(cols = 2:7,
names_to = "pollutant",
values_to = "total") %>%
filter(`total` != 0)  %>% # Filter out rows where total is 0
mutate(group = ifelse(REPORTING_YEAR >= 2000 & REPORTING_YEAR <= 2006,
1,
ifelse(REPORTING_YEAR >= 2007 & REPORTING_YEAR <= 2012,
2,
3)))
# Creating subsets for different year range
total_ascension_subset1 <- filter(total_ascension, `group` == 1)
total_ascension_subset2 <- filter(total_ascension, `group` == 2)
total_ascension_subset3 <- filter(total_ascension, `group` == 3)
total_ascension %>%
ggplot() +
geom_bar(stat = "identity", mapping = aes(x = factor(REPORTING_YEAR),
y = total,
fill = pollutant),
position = "fill") +
scale_fill_manual(name = "Names of Pollutant",
values = graph_colors,
labels = legend_variables_labels) +
labs(title = "Ascension Prevalence of Pollutant Concentration (2000-2018)",
x = "Year",
y = "Total Concentration") +
theme(axis.text.x = element_text(angle = 90,
vjust = 0.5,
hjust = 1))
# Plotting 3 Ascension subsets to visualize every pollutant by year better
# Subset 1
total_ascension_subset1 %>%
ggplot() +
geom_col(mapping = aes(x = REPORTING_YEAR, y = total, fill = pollutant),
position = position_dodge(0.9)) +
scale_fill_manual(name = "Names of Pollutant",
values=graph_colors,
labels = legend_variables_labels) +
labs(title = "Ascension Prevalence of Pollutant Concentration (2000-2006)",
x = "Year",
y = "Total Concentration (pounds)") +
theme(axis.text.x = element_text(angle = 90,
vjust = 0.5,
hjust = 1)) +
scale_x_continuous(n.breaks = 10)
# Subset 2
total_ascension_subset2 %>%
ggplot() +
geom_col(mapping = aes(x = REPORTING_YEAR, y = total, fill = pollutant),
position = position_dodge(0.9)) +
scale_fill_manual(name = "Names of Pollutant",
values=graph_colors,
labels = legend_variables_labels) +
labs(title = "Ascension Prevalence of Pollutant Concentration (2007-2012)",
x = "Year",
y = "Total Concentration (pounds)") +
theme(axis.text.x = element_text(angle = 90,
vjust = 0.5,
hjust = 1)) +
scale_x_continuous(n.breaks = 10)
# Subset 3
total_ascension_subset3 %>%
ggplot() +
geom_col(mapping = aes(x = REPORTING_YEAR,
y = total,
fill = pollutant),
position = position_dodge(0.9)) +
scale_fill_manual(name = "Names of Pollutant",
values=graph_colors,
labels = legend_variables_labels) +
labs(title = "Ascension Prevalence of Pollutant Concentration (2013-2018)",
x = "Year",
y = "Total Concentration (pounds)") +
theme(axis.text.x = element_text(angle = 90,
vjust = 0.5,
hjust = 1)) +
scale_x_continuous(n.breaks = 10)
#calculated the amount of each pollutant in Calcasieu county from 2000 to 2018
total_calcasieu <- calcasieu2 %>%
# only show years from 2000 to 2018
filter(REPORTING_YEAR >= 2000 & REPORTING_YEAR <= 2018) %>%
group_by(REPORTING_YEAR) %>%
summarise( total_benzene = sum(Benzene),
total_butadiene = sum(`1,3-Butadiene`),
total_ethylene = sum(`Ethylene oxide`),
total_formaldehyde = sum(Formaldehyde),
total_vinyl_chloride = sum(`Vinyl chloride`),
others = sum(`Arsenic (and compounds)` +
Asbestos +
Benzidine +
`Beryllium (Table 51.1)` +
`Cadmium (and compounds)` +
`Chromium VI (and compounds)` +
`Ethylene oxide` +
Formaldehyde +
`Nickel (refinery dust)` +
`Nickel (and compounds)` +
Trichloroethylene))
total_calcasieu <- total_calcasieu %>%
pivot_longer(cols = 2:7,
names_to = "pollutant",
values_to = "total") %>%
filter(`total` != 0)  %>% # Filter out rows where total is 0
mutate(group = ifelse(REPORTING_YEAR >= 2000 & REPORTING_YEAR <= 2006,
1,
ifelse(REPORTING_YEAR >= 2007 & REPORTING_YEAR <= 2012,
2,
3)))
# Creating subsets for different year range
total_calcasieu_subset1 <- filter(total_calcasieu, `group` == 1)
total_calcasieu_subset2 <- filter(total_calcasieu, `group` == 2)
total_calcasieu_subset3 <- filter(total_calcasieu, `group` == 3)
total_calcasieu %>%
ggplot() +
geom_bar(stat = "identity",
mapping = aes(x = factor(REPORTING_YEAR),
y = total,
fill = pollutant),
position = "fill") +
scale_fill_manual(name = "Names of Pollutant",
values = graph_colors,
labels = legend_variables_labels) +
labs(title = "Calcasieu Prevalence of Pollutant Concentration (2000-2018)",
x = "Year",
y = "Total Concentration") +
theme(axis.text.x = element_text(angle = 90,
vjust = 0.5,
hjust = 1))
# Plotting 3 Ascension subsets to visualize every pollutant by year better
# Substet 1
total_calcasieu_subset1 %>%
ggplot() +
geom_col(mapping = aes(x = REPORTING_YEAR,
y = total/10000,
fill = pollutant),
position = position_dodge(0.9)) +
scale_fill_manual(name = "Names of Pollutant",
values=graph_colors,
labels = legend_variables_labels) +
labs(title = "Calcasieu Prevalence of Pollutant Concentration (2000-2006)",
x = "Year",
y = "Total Concentration (10,000 pounds)") +
theme(axis.text.x = element_text(angle = 90,
vjust = 0.5,
hjust = 1)) +
scale_x_continuous(n.breaks = 10)
# Subset 2
total_calcasieu_subset2 %>%
ggplot() +
geom_col(mapping = aes(x = REPORTING_YEAR,
y = total/10000,
fill = pollutant),
position = "dodge") +
scale_fill_manual(name = "Names of Pollutant",
values=graph_colors,
labels = legend_variables_labels) +
labs(title = "Calcasieu Prevalence of Pollutant Concentration (2007-2012)",
x = "Year",
y = "Total Concentration (10,000 pounds)") +
theme(axis.text.x = element_text(angle = 90,
vjust = 0.5,
hjust = 1)) +
scale_x_continuous(n.breaks = 10)
# Substet 3
total_calcasieu_subset3%>%
ggplot() +
geom_col(mapping = aes(x = REPORTING_YEAR,
y = total/10000,
fill = pollutant),
position = "dodge") +
scale_fill_manual(name = "Names of Pollutant",
values=graph_colors,
labels = legend_variables_labels) +
labs(title = "Calcasieu Prevalence of Pollutant Concentration (2013-2018)",
x = "Year",
y = "Total Concentration (10,000 pounds)") +
theme(axis.text.x = element_text(angle = 90,
vjust = 0.5,
hjust = 1)) +
scale_x_continuous(n.breaks = 10)
